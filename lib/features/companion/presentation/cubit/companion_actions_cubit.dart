// lib/features/companion/presentation/cubit/companion_actions_cubit.dart
// üî• ACTUALIZADO: Integraci√≥n con estad√≠sticas reales desde pet details + Evoluci√≥n funcional

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:injectable/injectable.dart';
import 'package:xuma_a/features/companion/data/models/api_pet_response_model.dart';
import 'package:xuma_a/features/companion/data/models/companion_model.dart';
import '../../../../core/services/token_manager.dart';
import '../../domain/entities/companion_entity.dart';
import '../../domain/repositories/companion_repository.dart';
import '../../domain/usecases/feed_companion_via_api_usecase.dart';
import '../../domain/usecases/love_companion_via_api_usecase.dart';
import '../../domain/usecases/simulate_time_passage_usecase.dart';
import '../../domain/usecases/decrease_pet_stats_usecase.dart';
import '../../domain/usecases/increase_pet_stats_usecase.dart';

// States
abstract class CompanionActionsState extends Equatable {
  const CompanionActionsState();
  @override
  List<Object?> get props => [];
}

class CompanionActionsInitial extends CompanionActionsState {}

class CompanionActionsLoading extends CompanionActionsState {
  final String action;
  final CompanionEntity companion;
  
  const CompanionActionsLoading({
    required this.action,
    required this.companion,
  });
  
  @override
  List<Object> get props => [action, companion];
}

class CompanionActionsSuccess extends CompanionActionsState {
  final String action;
  final CompanionEntity companion;
  final String message;
  
  const CompanionActionsSuccess({
    required this.action,
    required this.companion,
    required this.message,
  });
  
  @override
  List<Object> get props => [action, companion, message];
}

class CompanionActionsError extends CompanionActionsState {
  final String message;
  final String? action;
  
  const CompanionActionsError({
    required this.message,
    this.action,
  });
  
  @override
  List<Object?> get props => [message, action];
}

@injectable
class CompanionActionsCubit extends Cubit<CompanionActionsState> {
  final CompanionRepository repository;
  final TokenManager tokenManager;
  final FeedCompanionViaApiUseCase feedCompanionViaApiUseCase;
  final LoveCompanionViaApiUseCase loveCompanionViaApiUseCase;
  final SimulateTimePassageUseCase simulateTimePassageUseCase;
  final DecreasePetStatsUseCase decreasePetStatsUseCase;
  final IncreasePetStatsUseCase increasePetStatsUseCase;
  
  CompanionActionsCubit({
    required this.repository,
    required this.tokenManager,
    required this.feedCompanionViaApiUseCase,
    required this.loveCompanionViaApiUseCase,
    required this.simulateTimePassageUseCase,
    required this.decreasePetStatsUseCase,
    required this.increasePetStatsUseCase,
  }) : super(CompanionActionsInitial());

  // ==================== üî• ALIMENTAR VIA API CON STATS REALES ====================
  Future<void> feedCompanionViaApi(CompanionEntity companion) async {
    try {
      debugPrint('üçé [ACTIONS_CUBIT] === ALIMENTANDO VIA API CON STATS REALES ===');
      debugPrint('üêæ [ACTIONS_CUBIT] Mascota: ${companion.displayName}');
      debugPrint('üè• [ACTIONS_CUBIT] Salud actual: ${companion.hunger}/100');
      
      if (!companion.isOwned) {
        emit(CompanionActionsError(
          message: 'üîí No puedes alimentar a ${companion.displayName} porque no es tuyo',
          action: 'feeding',
        ));
        return;
      }
      
      // üî• VALIDACI√ìN MEJORADA: Permitir alimentar hasta 95 (no 90)
      if (companion.hunger >= 95) {
        emit(CompanionActionsError(
          message: 'üçΩÔ∏è ${companion.displayName} est√° muy bien alimentado (${companion.hunger}/100)',
          action: 'feeding',
        ));
        return;
      }
      
      emit(CompanionActionsLoading(
        action: 'feeding',
        companion: companion,
      ));
      
      final userId = await tokenManager.getUserId();
      if (userId == null) {
        emit(CompanionActionsError(
          message: 'üîê Usuario no autenticado',
          action: 'feeding',
        ));
        return;
      }
      
      final petId = _extractPetId(companion);
      debugPrint('üÜî [ACTIONS_CUBIT] Pet ID para alimentar: $petId');
      debugPrint('üîÑ [ACTIONS_CUBIT] Llamando a repository.feedCompanionViaApi...');
      
      // üî• USAR EL NUEVO M√âTODO QUE OBTIENE STATS REALES
      final result = await feedCompanionViaApiUseCase(
        FeedCompanionViaApiParams(
          userId: userId,
          petId: petId,
        ),
      );
      
      result.fold(
        (failure) {
          debugPrint('‚ùå [ACTIONS_CUBIT] Error alimentando: ${failure.message}');
          emit(CompanionActionsError(
            message: failure.message,
            action: 'feeding',
          ));
        },
        (fedCompanion) {
          debugPrint('‚úÖ [ACTIONS_CUBIT] === ALIMENTACI√ìN EXITOSA CON STATS REALES ===');
          debugPrint('üè• [ACTIONS_CUBIT] Salud anterior: ${companion.hunger} ‚Üí Nueva: ${fedCompanion.hunger}');
          debugPrint('üìà [ACTIONS_CUBIT] Ganancia de salud: +${fedCompanion.hunger - companion.hunger}');
          
          final healthGain = fedCompanion.hunger - companion.hunger;
          final message = healthGain > 0 
              ? 'üçé ¬°${fedCompanion.displayName} ha sido alimentado! +$healthGain salud (${fedCompanion.hunger}/100)'
              : 'üçé ¬°${fedCompanion.displayName} ha sido alimentado! (${fedCompanion.hunger}/100)';
          
          emit(CompanionActionsSuccess(
            action: 'feeding',
            companion: fedCompanion,
            message: message,
          ));
        },
      );
      
    } catch (e) {
      debugPrint('üí• [ACTIONS_CUBIT] Error inesperado alimentando: $e');
      emit(CompanionActionsError(
        message: '‚ùå Error inesperado alimentando a ${companion.displayName}',
        action: 'feeding',
      ));
    }
  }
  
  // ==================== üî• DAR AMOR VIA API CON STATS REALES ====================
  Future<void> loveCompanionViaApi(CompanionEntity companion) async {
    try {
      debugPrint('üíñ [ACTIONS_CUBIT] === DANDO AMOR VIA API CON STATS REALES ===');
      debugPrint('üêæ [ACTIONS_CUBIT] Mascota: ${companion.displayName}');
      debugPrint('‚ù§Ô∏è [ACTIONS_CUBIT] Felicidad actual: ${companion.happiness}/100');
      
      if (!companion.isOwned) {
        emit(CompanionActionsError(
          message: 'üîí No puedes dar amor a ${companion.displayName} porque no es tuyo',
          action: 'loving',
        ));
        return;
      }
      
      // üî• VALIDACI√ìN MEJORADA: Permitir amar hasta 95 (no 90)
      if (companion.happiness >= 95) {
        emit(CompanionActionsError(
          message: '‚ù§Ô∏è ${companion.displayName} ya est√° muy feliz (${companion.happiness}/100)',
          action: 'loving',
        ));
        return;
      }
      
      emit(CompanionActionsLoading(
        action: 'loving',
        companion: companion,
      ));
      
      final userId = await tokenManager.getUserId();
      if (userId == null) {
        emit(CompanionActionsError(
          message: 'üîê Usuario no autenticado',
          action: 'loving',
        ));
        return;
      }
      
      final petId = _extractPetId(companion);
      debugPrint('üÜî [ACTIONS_CUBIT] Pet ID para dar amor: $petId');
      debugPrint('üîÑ [ACTIONS_CUBIT] Llamando a repository.loveCompanionViaApi...');
      
      // üî• USAR EL NUEVO M√âTODO QUE OBTIENE STATS REALES
      final result = await loveCompanionViaApiUseCase(
        LoveCompanionViaApiParams(
          userId: userId,
          petId: petId,
        ),
      );
      
      result.fold(
        (failure) {
          debugPrint('‚ùå [ACTIONS_CUBIT] Error dando amor: ${failure.message}');
          emit(CompanionActionsError(
            message: failure.message,
            action: 'loving',
          ));
        },
        (lovedCompanion) {
          debugPrint('‚úÖ [ACTIONS_CUBIT] === AMOR EXITOSO CON STATS REALES ===');
          debugPrint('‚ù§Ô∏è [ACTIONS_CUBIT] Felicidad anterior: ${companion.happiness} ‚Üí Nueva: ${lovedCompanion.happiness}');
          debugPrint('üìà [ACTIONS_CUBIT] Ganancia de felicidad: +${lovedCompanion.happiness - companion.happiness}');
          
          final happinessGain = lovedCompanion.happiness - companion.happiness;
          final message = happinessGain > 0 
              ? 'üíñ ¬°${lovedCompanion.displayName} se siente amado! +$happinessGain felicidad (${lovedCompanion.happiness}/100)'
              : 'üíñ ¬°${lovedCompanion.displayName} se siente amado! (${lovedCompanion.happiness}/100)';
          
          emit(CompanionActionsSuccess(
            action: 'loving',
            companion: lovedCompanion,
            message: message,
          ));
        },
      );
      
    } catch (e) {
      debugPrint('üí• [ACTIONS_CUBIT] Error inesperado dando amor: $e');
      emit(CompanionActionsError(
        message: '‚ùå Error inesperado dando amor a ${companion.displayName}',
        action: 'loving',
      ));
    }
  }

  // ==================== üî• SIMULAR TIEMPO CON STATS REALES ====================
  Future<void> simulateTimePassage(CompanionEntity companion) async {
    try {
      debugPrint('‚è∞ [ACTIONS_CUBIT] === SIMULANDO PASO DEL TIEMPO CON STATS REALES ===');
      debugPrint('üêæ [ACTIONS_CUBIT] Mascota: ${companion.displayName}');
      debugPrint('üìä [ACTIONS_CUBIT] Stats actuales - Felicidad: ${companion.happiness}, Salud: ${companion.hunger}');
      
      if (!companion.isOwned) {
        emit(CompanionActionsError(
          message: 'üîí No puedes simular tiempo para ${companion.displayName} porque no es tuyo',
          action: 'simulating',
        ));
        return;
      }
      
      // üî• VALIDACI√ìN MEJORADA: Solo simular si hay espacio para reducir
      if (companion.happiness <= 15 && companion.hunger <= 15) {
        emit(CompanionActionsError(
          message: 'üìä ${companion.displayName} ya est√° en estad√≠sticas muy bajas (H:${companion.happiness}, S:${companion.hunger})',
          action: 'simulating',
        ));
        return;
      }
      
      emit(CompanionActionsLoading(
        action: 'simulating',
        companion: companion,
      ));
      
      final userId = await tokenManager.getUserId();
      if (userId == null) {
        emit(CompanionActionsError(
          message: 'üîê Usuario no autenticado',
          action: 'simulating',
        ));
        return;
      }
      
      final petId = _extractPetId(companion);
      debugPrint('üÜî [ACTIONS_CUBIT] Pet ID para simular tiempo: $petId');
      debugPrint('üîÑ [ACTIONS_CUBIT] Llamando a repository.simulateTimePassage...');
      
      // üî• USAR EL NUEVO M√âTODO QUE OBTIENE STATS REALES
      final result = await simulateTimePassageUseCase(
        SimulateTimePassageParams(
          userId: userId,
          petId: petId,
        ),
      );
      
      result.fold(
        (failure) {
          debugPrint('‚ùå [ACTIONS_CUBIT] Error simulando tiempo: ${failure.message}');
          emit(CompanionActionsError(
            message: failure.message,
            action: 'simulating',
          ));
        },
        (updatedCompanion) {
          debugPrint('‚úÖ [ACTIONS_CUBIT] === SIMULACI√ìN DE TIEMPO EXITOSA CON STATS REALES ===');
          debugPrint('‚ù§Ô∏è [ACTIONS_CUBIT] Felicidad: ${companion.happiness} ‚Üí ${updatedCompanion.happiness}');
          debugPrint('üè• [ACTIONS_CUBIT] Salud: ${companion.hunger} ‚Üí ${updatedCompanion.hunger}');
          
          final happinessLoss = companion.happiness - updatedCompanion.happiness;
          final healthLoss = companion.hunger - updatedCompanion.hunger;
          
          String message = '‚è∞ ¬°Ha pasado el tiempo!';
          if (happinessLoss > 0 || healthLoss > 0) {
            message += ' ${updatedCompanion.displayName}';
            if (happinessLoss > 0) message += ' -$happinessLoss felicidad';
            if (healthLoss > 0) message += ' -$healthLoss salud';
            message += ' - ¬°Necesita cuidados!';
          }
          
          emit(CompanionActionsSuccess(
            action: 'simulating',
            companion: updatedCompanion,
            message: message,
          ));
        },
      );
      
    } catch (e) {
      debugPrint('üí• [ACTIONS_CUBIT] Error inesperado simulando tiempo: $e');
      emit(CompanionActionsError(
        message: '‚ùå Error inesperado simulando tiempo para ${companion.displayName}',
        action: 'simulating',
      ));
    }
  }

  // ==================== üî• EVOLUCI√ìN CORREGIDA ====================
  Future<void> evolveCompanion(CompanionEntity companion) async {
    try {
      debugPrint('ü¶ã [ACTIONS_CUBIT] === INICIANDO EVOLUCI√ìN CORREGIDA ===');
      debugPrint('üêæ [ACTIONS_CUBIT] Mascota: ${companion.displayName} ${companion.stage.name}');
      debugPrint('üìä [ACTIONS_CUBIT] Nivel: ${companion.level}, EXP: ${companion.experience}/${companion.experienceNeededForNextStage}');
      debugPrint('‚úÖ [ACTIONS_CUBIT] Puede evolucionar: ${companion.canEvolve}');
      
      // üî• VALIDACIONES MEJORADAS
      final validationResult = _validateEvolution(companion);
      if (!validationResult.isValid) {
        debugPrint('‚ùå [ACTIONS_CUBIT] Validaci√≥n fallida: ${validationResult.message}');
        emit(CompanionActionsError(
          message: validationResult.message,
          action: 'evolving',
        ));
        return;
      }
      
      emit(CompanionActionsLoading(
        action: 'evolving',
        companion: companion,
      ));
      
      final userId = await tokenManager.getUserId();
      if (userId == null) {
        emit(CompanionActionsError(
          message: 'üîê Usuario no autenticado',
          action: 'evolving',
        ));
        return;
      }

      // üî• OBTENER PET ID CORRECTO
      final petId = _extractPetId(companion);
      debugPrint('üÜî [ACTIONS_CUBIT] Pet ID extra√≠do: $petId');
      
      // üî• LLAMAR ENDPOINT DE EVOLUCI√ìN CORRECTO
      final result = await repository.evolveCompanionViaApi(
        userId: userId,
        petId: petId,
      );
      
      result.fold(
        (failure) {
          debugPrint('‚ùå [ACTIONS_CUBIT] Error evoluci√≥n API: ${failure.message}');
          emit(CompanionActionsError(
            message: failure.message,
            action: 'evolving',
          ));
        },
        (evolvedCompanion) {
          debugPrint('üéâ [ACTIONS_CUBIT] === EVOLUCI√ìN EXITOSA ===');
          debugPrint('‚ú® [ACTIONS_CUBIT] Nueva etapa: ${evolvedCompanion.stage.name}');
          
          final nextStageName = _getNextStageName(companion.stage);
          final realName = evolvedCompanion.displayName.isNotEmpty 
              ? evolvedCompanion.displayName 
              : companion.displayName;
              
          emit(CompanionActionsSuccess(
            action: 'evolving',
            companion: evolvedCompanion,
            message: 'üéâ ¬°$realName ha evolucionado a $nextStageName!',
          ));
        },
      );
      
    } catch (e) {
      debugPrint('üí• [ACTIONS_CUBIT] Error inesperado evoluci√≥n: $e');
      emit(CompanionActionsError(
        message: '‚ùå Error inesperado evolucionando a ${companion.displayName}',
        action: 'evolving',
      ));
    }
  }

  // ==================== üî• VALIDACI√ìN DE EVOLUCI√ìN MEJORADA ====================
  ValidationResult _validateEvolution(CompanionEntity companion) {
    debugPrint('üéØ [VALIDATION] === VALIDANDO EVOLUCI√ìN ===');
    debugPrint('üêæ [VALIDATION] Mascota: ${companion.displayName}');
    debugPrint('üìä [VALIDATION] EXP: ${companion.experience}/${companion.experienceNeededForNextStage}');
    debugPrint('üèÜ [VALIDATION] Etapa actual: ${companion.stage.name}');
    debugPrint('‚úÖ [VALIDATION] Es pose√≠da: ${companion.isOwned}');
    debugPrint('üîÑ [VALIDATION] Puede evolucionar: ${companion.canEvolve}');
    
    if (!companion.isOwned) {
      return ValidationResult(false, 'üîí No puedes evolucionar a ${companion.displayName} porque no es tuyo');
    }
    
    if (companion.stage == CompanionStage.adult) {
      return ValidationResult(false, 'üèÜ ${companion.displayName} ya est√° en su m√°xima evoluci√≥n');
    }
    
    // üî• VERIFICACI√ìN CORREGIDA: Usar canEvolve del entity
    if (!companion.canEvolve) {
      final needed = companion.experienceNeededForNextStage - companion.experience;
      debugPrint('üìâ [VALIDATION] Faltan $needed puntos de experiencia');
      return ValidationResult(false, 'üìä ${companion.displayName} necesita $needed puntos m√°s de experiencia');
    }
    
    debugPrint('‚úÖ [VALIDATION] Validaci√≥n exitosa - puede evolucionar');
    return ValidationResult(true, '');
  }

  // ==================== üî• EXTRACCI√ìN DE PET ID MEJORADA ====================
  String _extractPetId(CompanionEntity companion) {
    debugPrint('üîç [PET_ID] === EXTRAYENDO PET ID ===');
    debugPrint('üêæ [PET_ID] Companion ID: ${companion.id}');
    debugPrint('üîß [PET_ID] Tipo de companion: ${companion.runtimeType}');
    
    // 1. Intentar extraer de CompanionModelWithPetId
    if (companion is CompanionModelWithPetId) {
      debugPrint('‚úÖ [PET_ID] Es CompanionModelWithPetId, petId: ${companion.petId}');
      return companion.petId;
    }
    
    // 2. Intentar extraer del JSON de CompanionModel
    if (companion is CompanionModel) {
      try {
        final json = companion.toJson();
        if (json.containsKey('petId') && json['petId'] != null) {
          final petId = json['petId'] as String;
          debugPrint('‚úÖ [PET_ID] Extra√≠do del JSON: $petId');
          return petId;
        }
      } catch (e) {
        debugPrint('‚ö†Ô∏è [PET_ID] Error accediendo JSON: $e');
      }
    }
    
    // 3. Mapeo por defecto basado en tipo y etapa
    final mappedPetId = _mapCompanionToDefaultPetId(companion);
    debugPrint('üó∫Ô∏è [PET_ID] Usando mapeo por defecto: $mappedPetId');
    return mappedPetId;
  }
  
  String _mapCompanionToDefaultPetId(CompanionEntity companion) {
    // üî• MAPEO CORRECTO PARA LA API
    final typeMap = {
      CompanionType.dexter: 'chihuahua',
      CompanionType.elly: 'panda', 
      CompanionType.paxolotl: 'axolotl',
      CompanionType.yami: 'jaguar',
    };
    
    final stageMap = {
      CompanionStage.baby: '1',
      CompanionStage.young: '2', 
      CompanionStage.adult: '3',
    };
    
    final typeName = typeMap[companion.type] ?? 'chihuahua';
    final stageNumber = stageMap[companion.stage] ?? '2';
    
    // üî• FORMATO ESPERADO POR TU API
    final petId = '${typeName}_$stageNumber';
    debugPrint('üèóÔ∏è [MAPPING] Generado: $petId para ${companion.type.name}_${companion.stage.name}');
    return petId;
  }

  // ==================== üî• DESTACAR MASCOTA ====================
  Future<void> featureCompanion(CompanionEntity companion) async {
    try {
      debugPrint('‚≠ê [ACTIONS_CUBIT] === DESTACANDO MASCOTA ===');
      
      if (companion.isSelected) {
        emit(CompanionActionsError(
          message: '‚≠ê ${companion.displayName} ya es tu compa√±ero activo',
          action: 'featuring',
        ));
        return;
      }
      
      if (!companion.isOwned) {
        emit(CompanionActionsError(
          message: 'üîí No puedes destacar a ${companion.displayName} porque no es tuyo',
          action: 'featuring',
        ));
        return;
      }
      
      emit(CompanionActionsLoading(
        action: 'featuring',
        companion: companion,
      ));
      
      final userId = await tokenManager.getUserId();
      if (userId == null) {
        emit(CompanionActionsError(
          message: 'üîê Usuario no autenticado',
          action: 'featuring',
        ));
        return;
      }
      
      final petId = _extractPetId(companion);
      
      final result = await repository.featureCompanion(
        userId: userId,
        petId: petId,
      );
      
      result.fold(
        (failure) {
          emit(CompanionActionsError(
            message: failure.message,
            action: 'featuring',
          ));
        },
        (featuredCompanion) {
          final realName = featuredCompanion.displayName.isNotEmpty 
              ? featuredCompanion.displayName 
              : companion.displayName;
              
          emit(CompanionActionsSuccess(
            action: 'featuring',
            companion: featuredCompanion,
            message: '‚≠ê ¬°$realName ahora es tu compa√±ero activo!',
          ));
        },
      );
      
    } catch (e) {
      emit(CompanionActionsError(
        message: '‚ùå Error inesperado destacando a ${companion.displayName}',
        action: 'featuring',
      ));
    }
  }

  // ==================== üÜï M√âTODOS DE ESTAD√çSTICAS DIRECTOS ====================
  Future<void> decreaseCompanionStats(
    CompanionEntity companion, {
    int? happiness,
    int? health,
  }) async {
    try {
      debugPrint('üìâ [ACTIONS_CUBIT] === REDUCIENDO STATS DIRECTAMENTE ===');
      debugPrint('üêæ [ACTIONS_CUBIT] Mascota: ${companion.displayName}');
      debugPrint('üò¢ [ACTIONS_CUBIT] Reducir felicidad: ${happiness ?? 0}');
      debugPrint('ü©π [ACTIONS_CUBIT] Reducir salud: ${health ?? 0}');
      
      emit(CompanionActionsLoading(
        action: 'decreasing',
        companion: companion,
      ));
      
      final userId = await tokenManager.getUserId();
      if (userId == null) {
        emit(CompanionActionsError(
          message: 'üîê Usuario no autenticado',
          action: 'decreasing',
        ));
        return;
      }
      
      final petId = _extractPetId(companion);
      
      final result = await decreasePetStatsUseCase(
        DecreasePetStatsParams(
          userId: userId,
          petId: petId,
          happiness: happiness,
          health: health,
        ),
      );
      
      result.fold(
        (failure) {
          emit(CompanionActionsError(
            message: failure.message,
            action: 'decreasing',
          ));
        },
        (updatedCompanion) {
          debugPrint('‚úÖ [ACTIONS_CUBIT] Stats reducidas exitosamente');
          debugPrint('üìä [ACTIONS_CUBIT] Nuevas stats - H:${updatedCompanion.happiness}, S:${updatedCompanion.hunger}');
          
          emit(CompanionActionsSuccess(
            action: 'decreasing',
            companion: updatedCompanion,
            message: 'üìâ Stats de ${updatedCompanion.displayName} reducidas',
          ));
        },
      );
      
    } catch (e) {
      emit(CompanionActionsError(
        message: '‚ùå Error reduciendo stats de ${companion.displayName}',
        action: 'decreasing',
      ));
    }
  }
  
  Future<void> increaseCompanionStats(
    CompanionEntity companion, {
    int? happiness,
    int? health,
  }) async {
    try {
      debugPrint('üìà [ACTIONS_CUBIT] === AUMENTANDO STATS DIRECTAMENTE ===');
      debugPrint('üêæ [ACTIONS_CUBIT] Mascota: ${companion.displayName}');
      debugPrint('üòä [ACTIONS_CUBIT] Aumentar felicidad: ${happiness ?? 0}');
      debugPrint('‚ù§Ô∏è [ACTIONS_CUBIT] Aumentar salud: ${health ?? 0}');
      
      emit(CompanionActionsLoading(
        action: 'increasing',
        companion: companion,
      ));
      
      final userId = await tokenManager.getUserId();
      if (userId == null) {
        emit(CompanionActionsError(
          message: 'üîê Usuario no autenticado',
          action: 'increasing',
        ));
        return;
      }
      
      final petId = _extractPetId(companion);
      
      final result = await increasePetStatsUseCase(
        IncreasePetStatsParams(
          userId: userId,
          petId: petId,
          happiness: happiness,
          health: health,
        ),
      );
      
      result.fold(
        (failure) {
          emit(CompanionActionsError(
            message: failure.message,
            action: 'increasing',
          ));
        },
        (updatedCompanion) {
          debugPrint('‚úÖ [ACTIONS_CUBIT] Stats aumentadas exitosamente');
          debugPrint('üìä [ACTIONS_CUBIT] Nuevas stats - H:${updatedCompanion.happiness}, S:${updatedCompanion.hunger}');
          
          emit(CompanionActionsSuccess(
            action: 'increasing',
            companion: updatedCompanion,
            message: 'üìà Stats de ${updatedCompanion.displayName} aumentadas',
          ));
        },
      );
      
    } catch (e) {
      emit(CompanionActionsError(
        message: '‚ùå Error aumentando stats de ${companion.displayName}',
        action: 'increasing',
      ));
    }
  }

  // ==================== M√âTODOS LEGACY ====================
  Future<void> feedCompanion(CompanionEntity companion) async {
    await feedCompanionViaApi(companion);
  }
  
  Future<void> loveCompanion(CompanionEntity companion) async {
    await loveCompanionViaApi(companion);
  }
  
  // ==================== M√âTODOS HELPER ====================
  String _getNextStageName(CompanionStage currentStage) {
    switch (currentStage) {
      case CompanionStage.baby:
        return 'Joven';
      case CompanionStage.young:
        return 'Adulto';
      case CompanionStage.adult:
        return 'M√°ximo';
    }
  }
  
  void resetState() {
    emit(CompanionActionsInitial());
  }
  
  bool get isLoading => state is CompanionActionsLoading;
  
  String? get currentAction {
    final currentState = state;
    if (currentState is CompanionActionsLoading) {
      return currentState.action;
    }
    return null;
  }
}

class ValidationResult {
  final bool isValid;
  final String message;
  
  ValidationResult(this.isValid, this.message);
}