// lib/features/companion/presentation/cubit/companion_shop_cubit.dart - VERSI√ìN CORREGIDA
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:equatable/equatable.dart';
import 'package:injectable/injectable.dart';
import '../../domain/entities/companion_entity.dart';
import '../../domain/entities/companion_stats_entity.dart';
import '../../domain/usecases/get_companion_shop_usecase.dart';
import '../../domain/usecases/purchase_companion_usecase.dart';

// ==================== STATES ====================
abstract class CompanionShopState extends Equatable {
  const CompanionShopState();
  
  @override
  List<Object?> get props => [];
}

class CompanionShopInitial extends CompanionShopState {}

class CompanionShopLoading extends CompanionShopState {}

class CompanionShopLoaded extends CompanionShopState {
  final List<CompanionEntity> availableCompanions;
  final List<CompanionEntity> purchasableCompanions;
  final CompanionStatsEntity userStats;
  
  const CompanionShopLoaded({
    required this.availableCompanions,
    required this.purchasableCompanions,
    required this.userStats,
  });
  
  @override
  List<Object> get props => [availableCompanions, purchasableCompanions, userStats];
}

class CompanionShopPurchasing extends CompanionShopState {
  final CompanionEntity companion;
  
  const CompanionShopPurchasing({required this.companion});
  
  @override
  List<Object> get props => [companion];
}

class CompanionShopPurchaseSuccess extends CompanionShopState {
  final CompanionEntity purchasedCompanion;
  final String message;
  
  const CompanionShopPurchaseSuccess({
    required this.purchasedCompanion,
    required this.message,
  });
  
  @override
  List<Object> get props => [purchasedCompanion, message];
}

class CompanionShopError extends CompanionShopState {
  final String message;
  
  const CompanionShopError({required this.message});
  
  @override
  List<Object> get props => [message];
}

// ==================== CUBIT - VERSI√ìN CORREGIDA ====================
@injectable
class CompanionShopCubit extends Cubit<CompanionShopState> {
  final GetCompanionShopUseCase getCompanionShopUseCase;
  final PurchaseCompanionUseCase purchaseCompanionUseCase;
  
  // ‚úÖ ELIMINADO: static const String _defaultUserId = 'user_123';
  // üî• AHORA EL USER ID SE OBTIENE INTERNAMENTE DEL TOKEN
  
  CompanionShopCubit({
    required this.getCompanionShopUseCase,
    required this.purchaseCompanionUseCase,
  }) : super(CompanionShopInitial());
  
  Future<void> loadShop() async {
    try {
      debugPrint('üè™ [SHOP_CUBIT] === CARGANDO TIENDA DESDE API ===');
      emit(CompanionShopLoading());
      
      // üî• CAMBIO PRINCIPAL: YA NO PASAR USER ID - SE OBTIENE INTERNAMENTE
      final result = await getCompanionShopUseCase(
        const GetCompanionShopParams(userId: ''), // ‚Üê String vac√≠o, se obtiene internamente del token
      );
      
      result.fold(
        (failure) {
          debugPrint('‚ùå [SHOP_CUBIT] Error API: ${failure.message}');
          emit(CompanionShopError(message: failure.message));
        },
        (shopData) {
          debugPrint('‚úÖ [SHOP_CUBIT] === TIENDA API CARGADA EXITOSAMENTE ===');
          debugPrint('üí∞ [SHOP_CUBIT] Puntos usuario desde API: ${shopData.userStats.availablePoints}');
          debugPrint('üõçÔ∏è [SHOP_CUBIT] Mascotas desde API: ${shopData.availableCompanions.length}');
          
          // Log de cada mascota para debugging
          for (final companion in shopData.availableCompanions) {
            debugPrint('üêæ [SHOP_CUBIT] - ${companion.displayName}: ${companion.purchasePrice}‚òÖ (owned: ${companion.isOwned})');
          }
          
          // üîß FILTRAR MASCOTAS PARA LA TIENDA
          final purchasableCompanions = _filterCompanionsForShop(shopData.availableCompanions);
          
          debugPrint('üõí [SHOP_CUBIT] Mascotas en tienda despu√©s de filtrar: ${purchasableCompanions.length}');
          
          emit(CompanionShopLoaded(
            availableCompanions: shopData.availableCompanions,
            purchasableCompanions: purchasableCompanions,
            userStats: shopData.userStats,
          ));
        },
      );
    } catch (e) {
      debugPrint('‚ùå [SHOP_CUBIT] Error inesperado: $e');
      emit(CompanionShopError(message: 'Error inesperado: ${e.toString()}'));
    }
  }
  
  Future<void> purchaseCompanion(CompanionEntity companion) async {
    debugPrint('üõí [SHOP_CUBIT] === INICIANDO ADOPCI√ìN VIA API ===');
    debugPrint('üêæ [SHOP_CUBIT] Mascota: ${companion.displayName}');
    debugPrint('üÜî [SHOP_CUBIT] ID: ${companion.id}');
    debugPrint('üí∞ [SHOP_CUBIT] Precio: ${companion.purchasePrice}‚òÖ');
    
    if (state is! CompanionShopLoaded) {
      debugPrint('‚ùå [SHOP_CUBIT] Estado incorrecto para adopci√≥n');
      emit(CompanionShopError(message: 'Error: Estado de tienda no v√°lido'));
      return;
    }
    
    final currentState = state as CompanionShopLoaded;
    
    // üîß VERIFICAR PUNTOS SUFICIENTES
    if (currentState.userStats.availablePoints < companion.purchasePrice) {
      final faltantes = companion.purchasePrice - currentState.userStats.availablePoints;
      debugPrint('‚ùå [SHOP_CUBIT] Puntos insuficientes: faltan $faltantes');
      emit(CompanionShopError(
        message: 'No tienes suficientes puntos. Necesitas $faltantes puntos m√°s.',
      ));
      return;
    }
    
    debugPrint('‚è≥ [SHOP_CUBIT] Enviando adopci√≥n a API...');
    emit(CompanionShopPurchasing(companion: companion));
    
    try {
      // üî• CAMBIO PRINCIPAL: YA NO PASAR USER ID HARDCODEADO
      final result = await purchaseCompanionUseCase(
        PurchaseCompanionParams(
          userId: '', // ‚Üê String vac√≠o, se obtiene internamente del token
          companionId: companion.id, // Se mapear√° al pet ID real internamente
        ),
      );
      
      result.fold(
        (failure) {
          debugPrint('‚ùå [SHOP_CUBIT] Error en adopci√≥n API: ${failure.message}');
          
          // üîß MENSAJES DE ERROR ESPEC√çFICOS
          String userMessage;
          if (failure.message.contains('ya adoptada') || failure.message.contains('already owned')) {
            userMessage = 'Ya tienes esta mascota';
          } else if (failure.message.contains('insufficient') || failure.message.contains('insuficientes')) {
            userMessage = 'No tienes suficientes puntos';
          } else if (failure.message.contains('not found') || failure.message.contains('no encontrada')) {
            userMessage = 'Esta mascota no est√° disponible';
          } else {
            userMessage = 'Error adoptando mascota. Intenta de nuevo.';
          }
          
          emit(CompanionShopError(message: userMessage));
        },
        (adoptedCompanion) {
          debugPrint('üéâ [SHOP_CUBIT] === ADOPCI√ìN EXITOSA ===');
          debugPrint('‚úÖ [SHOP_CUBIT] Mascota adoptada: ${adoptedCompanion.displayName}');
          debugPrint('üè† [SHOP_CUBIT] Ahora es tuya: ${adoptedCompanion.isOwned}');
          
          emit(CompanionShopPurchaseSuccess(
            purchasedCompanion: adoptedCompanion,
            message: '¬°Felicidades! Has adoptado a ${adoptedCompanion.displayName} üéâ',
          ));
          
          // üîß RECARGAR TIENDA DESPU√âS DE ADOPCI√ìN
          debugPrint('üîÑ [SHOP_CUBIT] Recargando tienda despu√©s de adopci√≥n...');
          _reloadShopAfterPurchase();
        },
      );
    } catch (e) {
      debugPrint('‚ùå [SHOP_CUBIT] Excepci√≥n durante adopci√≥n: $e');
      emit(CompanionShopError(message: 'Error inesperado durante la adopci√≥n: ${e.toString()}'));
    }
  }

  /// Recargar tienda despu√©s de una adopci√≥n exitosa
  Future<void> _reloadShopAfterPurchase() async {
    try {
      debugPrint('üîÑ [SHOP_CUBIT] Iniciando recarga post-adopci√≥n...');
      
      // Pausa para asegurar que la API se actualice
      await Future.delayed(const Duration(milliseconds: 1000));
      
      if (isClosed) {
        debugPrint('‚ö†Ô∏è [SHOP_CUBIT] Cubit cerrado, saltando recarga');
        return;
      }
      
      debugPrint('üîÑ [SHOP_CUBIT] Ejecutando loadShop()...');
      await loadShop();
      
      debugPrint('‚úÖ [SHOP_CUBIT] Recarga completada');
    } catch (e) {
      debugPrint('‚ùå [SHOP_CUBIT] Error durante recarga: $e');
    }
  }

  /// Filtrar companions para mostrar en la tienda
  List<CompanionEntity> _filterCompanionsForShop(List<CompanionEntity> allCompanions) {
    debugPrint('üîß [SHOP_CUBIT] Filtrando companions para tienda');
    
    final filtered = allCompanions.where((companion) {
      // üîß MOSTRAR SOLO LOS NO POSE√çDOS
      final shouldShow = !companion.isOwned;
      debugPrint('üîß [SHOP_CUBIT] ${companion.displayName}: ${shouldShow ? "MOSTRAR" : "OCULTAR"} (owned: ${companion.isOwned})');
      return shouldShow;
    }).toList();
    
    // Ordenar por precio (m√°s baratos primero)
    filtered.sort((a, b) => a.purchasePrice.compareTo(b.purchasePrice));
    
    debugPrint('üîß [SHOP_CUBIT] Companions filtrados: ${filtered.length}');
    return filtered;
  }
  
  void refreshShop() {
    debugPrint('üîÑ [SHOP_CUBIT] Refresh manual solicitado');
    loadShop();
  }
  
  // M√©todo para filtrar companions por tipo
  List<CompanionEntity> getCompanionsByType(CompanionType type) {
    if (state is CompanionShopLoaded) {
      final currentState = state as CompanionShopLoaded;
      return currentState.purchasableCompanions
          .where((c) => c.type == type)
          .toList();
    }
    return [];
  }
  
  // Verificar si un companion puede ser comprado
  bool canAffordCompanion(CompanionEntity companion) {
    if (state is CompanionShopLoaded) {
      final currentState = state as CompanionShopLoaded;
      return currentState.userStats.availablePoints >= companion.purchasePrice;
    }
    return false;
  }
  
  // Obtener mensaje para companion espec√≠fico
  String getCompanionMessage(CompanionEntity companion) {
    if (companion.isOwned) {
      return 'Ya lo tienes';
    }
    
    if (state is CompanionShopLoaded) {
      final currentState = state as CompanionShopLoaded;
      if (currentState.userStats.availablePoints >= companion.purchasePrice) {
        return 'Disponible para adoptar';
      } else {
        final faltantes = companion.purchasePrice - currentState.userStats.availablePoints;
        return 'Necesitas $faltantes puntos m√°s';
      }
    }
    
    return 'Cargando...';
  }

  // üî• M√âTODO PARA TESTING/DEBUG DE LA API - TAMBI√âN CORREGIDO
  Future<void> testApiConnection() async {
    try {
      debugPrint('üß™ [SHOP_CUBIT] === TESTING API CONNECTION ===');
      
      emit(CompanionShopLoading());
      
      // üî• YA NO USAR USER ID HARDCODEADO EN EL TEST
      final result = await getCompanionShopUseCase(
        const GetCompanionShopParams(userId: ''), // ‚Üê Se obtiene internamente del token
      );
      
      result.fold(
        (failure) {
          debugPrint('‚ùå [API_TEST] Error: ${failure.message}');
          emit(CompanionShopError(message: 'API Test Failed: ${failure.message}'));
        },
        (shopData) {
          debugPrint('‚úÖ [API_TEST] === API CONNECTION SUCCESSFUL ===');
          debugPrint('üìä [API_TEST] Data received:');
          debugPrint('   - User points: ${shopData.userStats.availablePoints}');
          debugPrint('   - Total companions: ${shopData.availableCompanions.length}');
          debugPrint('   - Owned companions: ${shopData.userStats.ownedCompanions}');
          
          emit(CompanionShopLoaded(
            availableCompanions: shopData.availableCompanions,
            purchasableCompanions: _filterCompanionsForShop(shopData.availableCompanions),
            userStats: shopData.userStats,
          ));
        },
      );
    } catch (e) {
      debugPrint('‚ùå [API_TEST] Exception: $e');
      emit(CompanionShopError(message: 'API Test Exception: ${e.toString()}'));
    }
  }
}